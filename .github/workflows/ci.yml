name: Build & Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  lint:
    name: "Lint Code"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Lint backend
      run: cd backend && npm run lint

    - name: Lint frontend
      run: cd frontend && npm run lint

  unit-tests-backend:
    name: "Backend Unit Tests"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Start PostgreSQL with Docker
      run: |
        docker system prune -f || true
        docker rm -f postgres-test || true
        sleep 5
        docker run -d \
          --name postgres-test \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_DB=family_board_test \
          -p 5432:5432 \
          postgres:15-alpine

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 60 bash -c 'until docker exec postgres-test pg_isready -U postgres; do sleep 2; done'

    - name: Setup database schema
      run: cd backend && npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test

    - name: Test backend
      run: cd backend && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test
        DISABLE_CSRF_VALIDATION: true

    - name: Cleanup
      if: always()
      run: |
        docker stop postgres-test || true
        docker rm postgres-test || true

  unit-tests-frontend:
    name: "Frontend Unit Tests"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Test frontend
      run: cd frontend && npm test

  build:
    name: "Build Applications"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests-backend, unit-tests-frontend]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Build backend
      run: cd backend && npm run build

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/dist/
        retention-days: 1

  e2e-tests:
    name: "E2E Tests (Shard ${{ matrix.shard }}/${{ matrix.total }})"
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
        total: [4]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Install E2E test dependencies
      run: cd e2e-tests && npm install

    - name: Install frontend dependencies for build
      run: cd frontend && npm install

    - name: Install Playwright browsers
      run: cd e2e-tests && npx playwright install chromium

    - name: Install Playwright system dependencies  
      run: cd e2e-tests && npx playwright install-deps chromium

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Install Podman and Podman Compose
      run: |
        # Install Podman
        sudo apt-get update
        sudo apt-get install -y podman

        # Install podman-compose
        pip3 install podman-compose

        # Start Podman service
        sudo systemctl start podman
        sudo systemctl enable podman

    - name: Start application stack
      run: |
        # Create a minimal .env file for E2E tests (infrastructure variables)
        cat > .env << EOF
        POSTGRES_DB=familyboard
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_PORT=5432
        BACKEND_PORT=3001
        FRONTEND_PORT=3000
        ADMINER_PORT=8080
        DISABLE_CSRF_VALIDATION=true
        EOF

        # Create backend .env file with backend-specific variables
        cat > backend/.env << EOF
        # Backend Application Environment Variables for E2E Tests
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/familyboard?connection_limit=20&pool_timeout=30
        JWT_SECRET=test-jwt-secret-for-e2e-tests-32-chars-minimum-length
        BCRYPT_ROUNDS=10
        NODE_ENV=development
        PORT=3001
        # Disable CSRF validation for E2E tests until client integration is complete
        DISABLE_CSRF_VALIDATION=true
        FRONTEND_URL=http://localhost:3000
        API_RATE_LIMIT_WINDOW=15
        API_RATE_LIMIT_MAX=100
        DEFAULT_LANGUAGE=en
        SUPPORTED_LANGUAGES=en,fr
        EOF

        # Create frontend .env file with frontend-specific variables
        cat > frontend/.env << EOF
        # Frontend Application Environment Variables for E2E Tests
        # Use localhost for E2E tests since browser runs on host machine
        # Note: /api is added automatically by frontend code
        VITE_API_URL=http://localhost:3001
        VITE_DISABLE_CSRF_VALIDATION=true
        VITE_DEFAULT_LANGUAGE=en
        VITE_SUPPORTED_LANGUAGES=en,fr
        EOF

        # Start the full application stack with Podman Compose
        podman-compose -f podman-compose.yml up --build -d

        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3001/api/health; do echo "Waiting for backend..."; sleep 3; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do echo "Waiting for frontend..."; sleep 3; done'

        # Initialize database schema
        echo "Initializing database schema..."
        podman-compose -f podman-compose.yml exec -T backend npx prisma db push

        echo "Services are ready!"

    - name: Test API connectivity from frontend container
      run: |
        echo "Testing API connectivity..."
        # Test if frontend container can reach backend
        podman-compose -f podman-compose.yml exec -T frontend curl -f http://backend:3001/api/health || echo "Frontend->Backend connection failed"
        # Test if host can reach both services
        curl -f http://localhost:3001/api/health || echo "Host->Backend connection failed"
        curl -f http://localhost:3000 || echo "Host->Frontend connection failed"
        echo "API connectivity test completed"

    - name: Run E2E tests
      run: |
        cd e2e-tests
        npm ci
        npx playwright install chromium
        # Check if playwright config exists
        if [ ! -f "playwright.config.ts" ]; then
          echo "Error: playwright.config.ts not found"
          exit 1
        fi
        npx playwright test --shard=${{ matrix.shard }}/${{ matrix.total }}

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-shard-${{ matrix.shard }}
        path: e2e-tests/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-shard-${{ matrix.shard }}
        path: e2e-tests/test-results/
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        podman-compose -f podman-compose.yml down -v || true
        podman system prune -f || true

  build-and-push-images:
    name: "Build & Push Container Images"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests-backend, unit-tests-frontend, build, e2e-tests]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
        podman --version

    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push backend image
      run: |
        cd backend
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        podman build \
          --tag ghcr.io/${REPO_LOWER}/backend:latest \
          --tag ghcr.io/${REPO_LOWER}/backend:${{ github.sha }} \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "org.opencontainers.image.description=Family Board Backend" \
          --label "org.opencontainers.image.licenses=MIT" \
          --file Containerfile \
          .

        podman push ghcr.io/${REPO_LOWER}/backend:latest
        podman push ghcr.io/${REPO_LOWER}/backend:${{ github.sha }}

    - name: Build and push frontend image
      run: |
        cd frontend
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        podman build \
          --build-arg VITE_API_URL="https://mabt.eu:9443" \
          --build-arg VITE_SOCKET_URL="https://mabt.eu:9443" \
          --build-arg VITE_ENVIRONMENT=production \
          --build-arg VITE_APP_NAME="Family Board" \
          --build-arg VITE_APP_VERSION="1.0.0" \
          --build-arg VITE_ENABLE_ANALYTICS=false \
          --build-arg VITE_ENABLE_PUSH_NOTIFICATIONS=false \
          --build-arg VITE_DEFAULT_LANGUAGE=en \
          --build-arg VITE_SUPPORTED_LANGUAGES=en,fr \
          --tag ghcr.io/${REPO_LOWER}/frontend:latest \
          --tag ghcr.io/${REPO_LOWER}/frontend:${{ github.sha }} \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "org.opencontainers.image.description=Family Board Frontend" \
          --label "org.opencontainers.image.licenses=MIT" \
          --file Containerfile.prod \
          .

        podman push ghcr.io/${REPO_LOWER}/frontend:latest
        podman push ghcr.io/${REPO_LOWER}/frontend:${{ github.sha }}

    - name: Image build summary
      run: |
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "## Container Images Built and Pushed 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Image" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ghcr.io/${REPO_LOWER}/backend" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: latest, ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Image" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ghcr.io/${REPO_LOWER}/frontend" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: latest, ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Images are available at: https://github.com/${{ github.repository }}/pkgs/container" >> $GITHUB_STEP_SUMMARY
