name: Build & Test Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: "Lint Code"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Lint backend
      run: cd backend && npm run lint

    - name: Lint frontend
      run: cd frontend && npm run lint

  unit-tests-backend:
    name: "Backend Unit Tests"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Start PostgreSQL with Docker
      run: |
        docker system prune -f || true
        docker rm -f postgres-test || true
        sleep 5
        docker run -d \
          --name postgres-test \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_DB=family_board_test \
          -p 5432:5432 \
          postgres:15-alpine

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 60 bash -c 'until docker exec postgres-test pg_isready -U postgres; do sleep 2; done'

    - name: Setup database schema
      run: cd backend && npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test

    - name: Test backend
      run: cd backend && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test
        DISABLE_CSRF_VALIDATION: true

    - name: Cleanup
      if: always()
      run: |
        docker stop postgres-test || true
        docker rm postgres-test || true

  unit-tests-frontend:
    name: "Frontend Unit Tests"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Test frontend
      run: cd frontend && npm test

  build:
    name: "Build Applications"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests-backend, unit-tests-frontend]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Build backend
      run: cd backend && npm run build

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/dist/
        retention-days: 1

  e2e-tests:
    name: "E2E Tests (Shard ${{ matrix.shard }}/${{ matrix.total }})"
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
        total: [4]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install backend dependencies
      run: cd backend && npm install

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Install E2E test dependencies
      run: cd e2e-tests && npm install

    - name: Install frontend dependencies for build
      run: cd frontend && npm install

    - name: Install Playwright browsers
      run: cd e2e-tests && npx playwright install chromium

    - name: Install Playwright system dependencies  
      run: cd e2e-tests && npx playwright install-deps chromium

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Start application stack
      run: |
        # Create a minimal .env file for E2E tests
        cat > .env << EOF
        DB_NAME=family_board
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_PORT=5432
        BACKEND_PORT=3001
        FRONTEND_PORT=3000
        ADMINER_PORT=8080
        JWT_SECRET=test-jwt-secret-for-e2e-tests-32-chars-minimum-length
        NODE_ENV=development
        VITE_API_URL=http://localhost:3001
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/family_board
        # Disable CSRF validation for E2E tests until client integration is complete
        DISABLE_CSRF_VALIDATION=true
        EOF
        
        # Start the full application stack
        docker compose up --build -d
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3001/api/health; do echo "Waiting for backend..."; sleep 3; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do echo "Waiting for frontend..."; sleep 3; done'
        
        # Initialize database schema
        echo "Initializing database schema..."
        docker compose exec -T backend npx prisma db push
        
        echo "Services are ready!"

    - name: Run E2E tests
      run: |
        cd e2e-tests
        npm install
        npx playwright install chromium
        npx playwright test --shard=${{ matrix.shard }}/${{ matrix.total }}

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v || true
        docker system prune -f || true
