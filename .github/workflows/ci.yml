name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Temporarily disabled for E2E test iteration
  # lint:
  #   name: "Lint Code"
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install backend dependencies
  #     run: cd backend && npm ci

  #   - name: Install frontend dependencies
  #     run: cd frontend && npm ci

  #   - name: Generate Prisma client
  #     run: cd backend && npx prisma generate

  #   - name: Lint backend
  #     run: cd backend && npm run lint

  #   - name: Lint frontend
  #     run: cd frontend && npm run lint

  # unit-tests-backend:
  #   name: "Backend Unit Tests"
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install backend dependencies
  #     run: cd backend && npm ci

  #   - name: Generate Prisma client
  #     run: cd backend && npx prisma generate

  #   - name: Start PostgreSQL with Docker
  #     run: |
  #       docker run -d \
  #         --name postgres-test \
  #         -e POSTGRES_PASSWORD=postgres \
  #         -e POSTGRES_USER=postgres \
  #         -e POSTGRES_DB=family_board_test \
  #         -p 5432:5432 \
  #         postgres:15-alpine

  #   - name: Wait for PostgreSQL to be ready
  #     run: |
  #       timeout 60 bash -c 'until docker exec postgres-test pg_isready -U postgres; do sleep 2; done'

  #   - name: Setup database schema
  #     run: cd backend && npx prisma db push
  #     env:
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test

  #   - name: Test backend
  #     run: cd backend && npm test
  #     env:
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/family_board_test

  #   - name: Cleanup
  #     if: always()
  #     run: |
  #       docker stop postgres-test || true
  #       docker rm postgres-test || true

  # unit-tests-frontend:
  #   name: "Frontend Unit Tests"
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install frontend dependencies
  #     run: cd frontend && npm ci

  #   - name: Test frontend
  #     run: cd frontend && npm test

  # build:
  #   name: "Build Applications"
  #   runs-on: ubuntu-latest
  #   needs: [lint, unit-tests-backend, unit-tests-frontend]
    
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Install backend dependencies
  #     run: cd backend && npm ci

  #   - name: Install frontend dependencies
  #     run: cd frontend && npm ci

  #   - name: Generate Prisma client
  #     run: cd backend && npx prisma generate

  #   - name: Build backend
  #     run: cd backend && npm run build

  #   - name: Build frontend
  #     run: cd frontend && npm run build

  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: build-artifacts
  #       path: |
  #         backend/dist/
  #         frontend/dist/
  #       retention-days: 1

  e2e-tests:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    # needs: [build]  # Temporarily disabled for iteration
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Install E2E test dependencies
      run: cd e2e-tests && npm ci

    - name: Install frontend dependencies for build
      run: cd frontend && npm ci

    - name: Install Playwright browsers
      run: cd e2e-tests && npx playwright install chromium

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Build backend
      run: cd backend && npm run build

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Start application stack
      run: |
        # Create a minimal .env file for E2E tests
        cat > .env << EOF
        DB_NAME=family_board
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_PORT=5432
        BACKEND_PORT=3001
        FRONTEND_PORT=3000
        ADMINER_PORT=8080
        JWT_SECRET=test-jwt-secret-for-e2e
        NODE_ENV=development
        VITE_API_URL=http://localhost:3001
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/family_board
        EOF
        
        # Start the database first
        docker compose up -d postgres
        
        # Wait for database to be ready
        echo "Waiting for database to be ready..."
        timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U postgres; do sleep 2; done'
        
        # Initialize database schema before starting backend
        echo "Initializing database schema..."
        docker compose run --rm -T backend npx prisma db push
        
        # Now start the full application stack
        docker compose up --build -d
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
        echo "Services are ready!"

    - name: Run E2E tests
      run: cd e2e-tests && npm test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v || true
        docker system prune -f || true
