name: Build & Deploy to GitHub Container Registry

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Only run deployment if CI passes
  check-ci:
    name: "Check CI Status"
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.check.outputs.result }}
    steps:
      - name: Check CI workflow status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: context.sha,
              status: 'completed'
            });
            
            const ciRun = workflows.workflow_runs[0];
            if (ciRun && ciRun.conclusion === 'success') {
              return 'true';
            }
            return 'false';

  build-and-push:
    name: "Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: check-ci
    if: needs.check-ci.outputs.ci-passed == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_API_URL=${{ vars.PRODUCTION_API_URL || 'http://localhost:3001' }}
            VITE_SOCKET_URL=${{ vars.PRODUCTION_SOCKET_URL || 'http://localhost:3001' }}
            VITE_ENVIRONMENT=production
            VITE_APP_NAME=Family Board
            VITE_APP_VERSION=${{ github.sha }}
            VITE_ENABLE_ANALYTICS=false
            VITE_ENABLE_PUSH_NOTIFICATIONS=false
            VITE_DEFAULT_LANGUAGE=en
            VITE_SUPPORTED_LANGUAGES=en,fr

  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## ðŸš€ New Deployment Available
          
          **Docker Images:**
          - Backend: \`ghcr.io/${{ env.IMAGE_NAME_BACKEND }}:latest\`
          - Frontend: \`ghcr.io/${{ env.IMAGE_NAME_FRONTEND }}:latest\`
          
          **Changes in this release:**
          ${COMMITS}
          
          **Deployment:**
          Pull the latest images on your production server:
          \`\`\`bash
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          \`\`\`
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: false

  notify-deployment:
    name: "Notify Deployment Ready"
    runs-on: ubuntu-latest
    needs: [build-and-push, create-release]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
      - name: Deployment notification
        run: |
          echo "ðŸŽ‰ Deployment successful!"
          echo "Backend image: ghcr.io/${{ env.IMAGE_NAME_BACKEND }}:latest"
          echo "Frontend image: ghcr.io/${{ env.IMAGE_NAME_FRONTEND }}:latest"
          echo ""
          echo "To deploy on production server:"
          echo "1. Pull latest images: docker-compose -f docker-compose.prod.yml pull"
          echo "2. Restart services: docker-compose -f docker-compose.prod.yml up -d"
