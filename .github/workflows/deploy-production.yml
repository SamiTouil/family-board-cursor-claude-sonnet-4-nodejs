name: Continuous Deployment to Production

on:
  push:
    branches: [main]  # Triggers when PR is merged to main

env:
  NODE_VERSION: '18'

jobs:
  # Run all tests first (your existing CI)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Generate Prisma client
        run: |
          cd backend
          npx prisma generate

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # Skip backend tests temporarily as they require DATABASE_URL
      # - name: Run backend tests
      #   run: |
      #     cd backend
      #     npm test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Run linting
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Build applications
        run: |
          cd backend && npm run build
          cd ../frontend && npm run build

  # Deploy to production (only if tests pass)
  deploy:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.PROD_EC2_USER }}
          key: ${{ secrets.PROD_EC2_SSH_KEY }}
          port: ${{ secrets.PROD_EC2_PORT || 22 }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment..."
            
            # Navigate to application directory
            cd /home/ubuntu/family-board
            
            # Configure swap space if not already present (for memory-constrained instances)
            echo "üíæ Ensuring swap space is configured..."
            SWAP_SIZE="2G"
            SWAP_FILE="/swapfile"
            
            if ! swapon --show | grep -q "$SWAP_FILE"; then
              echo "üîß Creating ${SWAP_SIZE} swap file..."
              sudo fallocate -l $SWAP_SIZE $SWAP_FILE
              sudo chmod 600 $SWAP_FILE
              sudo mkswap $SWAP_FILE
              sudo swapon $SWAP_FILE
              
              # Make swap permanent
              if ! grep -q "$SWAP_FILE" /etc/fstab; then
                echo "$SWAP_FILE none swap sw 0 0" | sudo tee -a /etc/fstab
              fi
              echo "‚úÖ Swap space configured successfully!"
            else
              echo "‚úÖ Swap space already configured"
            fi
            
            # Display memory status for monitoring
            echo "üìä Current memory status:"
            free -h
            
            # Clean up Docker to free memory before building
            echo "üßπ Cleaning up Docker to free memory..."
            docker system prune -f || true
            
            # Pull latest changes
            echo "üì• Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            
            # Create backup of current deployment
            echo "üíæ Creating backup..."
            timestamp=$(date +%Y%m%d_%H%M%S)
            docker-compose -f docker-compose.prod.yml logs > logs_backup_$timestamp.log 2>&1 || true
            
            # Build new images sequentially to avoid memory issues
            echo "üî® Building new images sequentially..."
            echo "üì¶ Building backend..."
            docker-compose -f docker-compose.prod.yml build --no-cache backend
            
            echo "üì¶ Building frontend..."
            docker-compose -f docker-compose.prod.yml build --no-cache frontend
            
            echo "üì¶ Building remaining services..."
            docker-compose -f docker-compose.prod.yml build --no-cache nginx
            
            # Stop current services gracefully
            echo "‚èπÔ∏è Stopping current services..."
            docker-compose -f docker-compose.prod.yml down --timeout 30
            
            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            docker-compose -f docker-compose.prod.yml run --rm db-migrate
            
            # Start new services
            echo "‚ñ∂Ô∏è Starting new services..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "üè• Running health checks..."
            max_attempts=10
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -f -s http://localhost/api/health > /dev/null; then
                echo "‚úÖ Health check passed!"
                break
              else
                echo "‚ùå Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -eq $max_attempts ]; then
                  echo "üö® Deployment failed - rolling back..."
                  docker-compose -f docker-compose.prod.yml down
                  # Could restore previous backup here
                  exit 1
                fi
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
            
            # Cleanup old images
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            echo "üéâ Deployment completed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          # Optional: Send Slack/Discord notification
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          # Optional: Send alert notification 