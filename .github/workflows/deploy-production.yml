name: Continuous Deployment to Production

on:
  # Trigger on pushes to main (after PR merge)
  push:
    branches: [main]
  
  # Allow manual deployment trigger
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

env:
  NODE_VERSION: '18'

jobs:
  # Deploy to production (after PR merge to main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          timeout: 30s
          command_timeout: 10m
          script: |
            set -e  # Exit on any error
            
            echo "🚀 Starting deployment..."
            
            # Navigate to application directory
            cd /home/${{ secrets.EC2_USER }}/family-board
            
            # Configure swap space if not already present (for memory-constrained instances)
            echo "💾 Ensuring swap space is configured..."
            SWAP_SIZE="2G"
            SWAP_FILE="/swapfile"
            
            if ! swapon --show | grep -q "$SWAP_FILE"; then
              echo "🔧 Creating ${SWAP_SIZE} swap file..."
              sudo fallocate -l $SWAP_SIZE $SWAP_FILE
              sudo chmod 600 $SWAP_FILE
              sudo mkswap $SWAP_FILE
              sudo swapon $SWAP_FILE
              
              # Make swap permanent
              if ! grep -q "$SWAP_FILE" /etc/fstab; then
                echo "$SWAP_FILE none swap sw 0 0" | sudo tee -a /etc/fstab
              fi
              echo "✅ Swap space configured successfully!"
            else
              echo "✅ Swap space already configured"
            fi
            
            # Display memory status for monitoring
            echo "📊 Current memory status:"
            free -h
            
            # Check disk space and clean up if needed
            echo "💽 Checking disk space..."
            df -h
            
            # Clean up Docker aggressively if disk usage is high (>80%)
            DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            if [ "$DISK_USAGE" -gt 80 ]; then
              echo "⚠️  High disk usage detected (${DISK_USAGE}%), cleaning up Docker..."
              docker system prune -af --volumes || true
              echo "✅ Docker cleanup completed"
              df -h
            else
              echo "✅ Disk space is sufficient (${DISK_USAGE}% used)"
              # Light cleanup to free some space
              docker system prune -f || true
            fi
            
            # Pull latest changes
            echo "📥 Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            
            # Load environment variables from .env file
            echo "⚙️ Loading environment variables..."
            if [ -f .env ]; then
              export $(cat .env | grep -v '^#' | xargs)
              echo "✅ Environment variables loaded from .env"
            else
              echo "❌ .env file not found! Please create it with DATABASE_URL, JWT_SECRET, and VITE_API_URL"
              exit 1
            fi
            
            # Create backup of current deployment
            echo "💾 Creating backup..."
            timestamp=$(date +%Y%m%d_%H%M%S)
            docker-compose -f docker-compose.prod.yml logs > logs_backup_$timestamp.log 2>&1 || true
            
            # Build new images sequentially to avoid memory issues
            echo "🔨 Building new images sequentially..."
            echo "📦 Building backend..."
            docker-compose -f docker-compose.prod.yml build --no-cache backend
            
            echo "📦 Building frontend..."
            docker-compose -f docker-compose.prod.yml build --no-cache frontend
            
            echo "📦 Building remaining services..."
            docker-compose -f docker-compose.prod.yml build --no-cache nginx
            
            # Stop current services gracefully
            echo "⏹️ Stopping current services..."
            docker-compose -f docker-compose.prod.yml down --timeout 30
            
            # Run database migrations
            echo "🗄️ Running database migrations..."
            docker-compose -f docker-compose.prod.yml run --rm db-migrate
            
            # Start new services
            echo "▶️ Starting new services..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "🏥 Running health checks..."
            max_attempts=10
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -f -s http://localhost/api/health > /dev/null; then
                echo "✅ Health check passed!"
                break
              else
                echo "❌ Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -eq $max_attempts ]; then
                  echo "🚨 Deployment failed - rolling back..."
                  docker-compose -f docker-compose.prod.yml down
                  # Could restore previous backup here
                  exit 1
                fi
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
            
            # Cleanup old images
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            # Final disk space check
            echo "💽 Final disk space status:"
            df -h
            
            echo "🎉 Deployment completed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Optional: Send Slack/Discord notification
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          # Optional: Send alert notification 