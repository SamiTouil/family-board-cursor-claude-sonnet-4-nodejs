events {
    worker_connections 1024;
}

http {
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Security headers
    map $sent_http_content_type $expires {
        "text/html"                 epoch;
        "text/html; charset=utf-8"  epoch;
        default                     off;
    }

    upstream backend {
        server backend:3001;
    }

    upstream frontend {
        server frontend:80;
    }

    # Block common exploit paths
    location ~ /\.(git|svn|hg|bzr|env|DS_Store|AppleDouble|LSOverride|idea|vscode) {
        return 404;
    }

    # Block suspicious user agents
    map $http_user_agent $blocked_agent {
        default 0;
        ~*bot 0;  # Allow legitimate bots like Googlebot
        ~*(Go-http-client|python-requests|curl|wget) 1;  # Block common scanners
        ~*^$ 1;  # Block empty user agents
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name mabt.eu www.mabt.eu;
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            # Block suspicious agents except for ACME challenge
            if ($blocked_agent) {
                return 403;
            }
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS configuration
    server {
        listen 443 ssl http2;
        server_name mabt.eu www.mabt.eu;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/mabt.eu/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mabt.eu/privkey.pem;
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self' wss: https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;

        # Block suspicious agents
        if ($blocked_agent) {
            return 403;
        }

        # Block common exploit paths (repeated for HTTPS)
        location ~ /\.(git|svn|hg|bzr|env|DS_Store|AppleDouble|LSOverride|idea|vscode) {
            return 404;
        }

        # Healthcheck endpoint (no rate limiting)
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }

        # API routes with higher rate limit
        location /api {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for backend
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Socket.io with higher rate limit
        location /socket.io {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache static assets
            expires $expires;
            
            # Timeouts for frontend
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Custom error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Default server to catch all other requests
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        
        # Self-signed cert for default server
        ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
        
        return 444;  # Close connection without response
    }
}