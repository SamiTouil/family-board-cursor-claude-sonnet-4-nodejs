services:
  postgres:
    image: postgres:15-alpine
    container_name: family-board-db
    environment:
      POSTGRES_DB: ${DB_NAME:-family_board}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4.8.1
    container_name: family-board-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-board-backend
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-family_board}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: family-board-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data: 