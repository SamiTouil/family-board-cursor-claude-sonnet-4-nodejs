# Docker Compose configuration for CI/CD and Docker environments
# Based on podman-compose.yml but adapted for Docker
services:
  postgres:
    image: postgres:15-alpine
    container_name: family-board-db
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-familyboard}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile  # Use Dockerfile instead of Containerfile for Docker
      target: development
    container_name: family-board-backend
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    env_file:
      - .env                    # Infrastructure variables
      - ./backend/.env          # Backend-specific variables
    environment:
      # Centralized CSRF configuration
      DISABLE_CSRF_VALIDATION: ${DISABLE_CSRF_VALIDATION:-false}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile  # Use Dockerfile instead of Containerfile for Docker
      target: development
    container_name: family-board-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    env_file:
      - .env                    # Infrastructure variables
      - ./frontend/.env         # Frontend-specific variables
    environment:
      # Centralized CSRF configuration
      VITE_DISABLE_CSRF_VALIDATION: ${DISABLE_CSRF_VALIDATION:-false}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
