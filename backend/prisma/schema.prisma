generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  firstName            String              @map("first_name")
  lastName             String              @map("last_name")
  email                String?             @unique
  password             String?
  avatarUrl            String?             @map("avatar_url")
  isVirtual            Boolean             @default(false) @map("is_virtual")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  createdFamilies      Family[]            @relation("FamilyCreator")
  receivedInvites      FamilyInvite[]      @relation("InviteReceiver")
  sentInvites          FamilyInvite[]      @relation("InviteSender")
  reviewedJoinRequests FamilyJoinRequest[] @relation("JoinRequestReviewer")
  joinRequests         FamilyJoinRequest[]
  familyMemberships    FamilyMember[]
  dayTemplateItems     DayTemplateItem[]
  originalTaskOverrides TaskOverride[]     @relation("TaskOverrideOriginalMember")
  newTaskOverrides     TaskOverride[]      @relation("TaskOverrideNewMember")

  @@map("users")
}

model Family {
  id            String              @id @default(cuid())
  name          String
  description   String?
  avatarUrl     String?             @map("avatar_url")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  creatorId     String              @map("creator_id")
  creator       User                @relation("FamilyCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  invites       FamilyInvite[]
  joinRequests  FamilyJoinRequest[]
  members       FamilyMember[]
  tasks         Task[]
  dayTemplates  DayTemplate[]
  weekTemplates WeekTemplate[]
  weekOverrides WeekOverride[]

  @@map("families")
}

model FamilyMember {
  id       String           @id @default(cuid())
  role     FamilyMemberRole @default(MEMBER)
  joinedAt DateTime         @default(now()) @map("joined_at")
  userId   String           @map("user_id")
  familyId String           @map("family_id")
  family   Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_members")
}

model FamilyInvite {
  id           String              @id @default(cuid())
  code         String              @unique
  status       FamilyInviteStatus  @default(PENDING)
  expiresAt    DateTime            @map("expires_at")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  respondedAt  DateTime?           @map("responded_at")
  familyId     String              @map("family_id")
  senderId     String              @map("sender_id")
  receiverId   String?             @map("receiver_id")
  family       Family              @relation(fields: [familyId], references: [id], onDelete: Cascade)
  receiver     User?               @relation("InviteReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender       User                @relation("InviteSender", fields: [senderId], references: [id], onDelete: Cascade)
  joinRequests FamilyJoinRequest[]

  @@map("family_invites")
}

model FamilyJoinRequest {
  id          String                  @id @default(cuid())
  status      FamilyJoinRequestStatus @default(PENDING)
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  respondedAt DateTime?               @map("responded_at")
  message     String?
  userId      String                  @map("user_id")
  familyId    String                  @map("family_id")
  inviteId    String                  @map("invite_id")
  reviewerId  String?                 @map("reviewer_id")
  family      Family                  @relation(fields: [familyId], references: [id], onDelete: Cascade)
  invite      FamilyInvite            @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  reviewer    User?                   @relation("JoinRequestReviewer", fields: [reviewerId], references: [id])
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_join_requests")
}

model Task {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  color              String
  icon               String
  defaultStartTime   String
  defaultDuration    Int
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  familyId           String              @map("family_id")
  dayTemplateItems   DayTemplateItem[]
  taskOverrides      TaskOverride[]
  family             Family              @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

// DayTemplate represents a reusable template for scheduling tasks
// Examples: "Weekday", "Weekend", "School Day", "Holiday"
model DayTemplate {
  id              String             @id @default(cuid())
  name            String             // Template name (e.g., "Weekday", "Weekend")
  description     String?            // Optional description
  isActive        Boolean            @default(true) // Whether this template can be used
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  familyId        String             @map("family_id")
  family          Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)
  items           DayTemplateItem[]  // Tasks included in this template
  weekTemplateDays WeekTemplateDay[] // Week templates that use this day template

  @@unique([familyId, name]) // Unique template names per family
  @@map("day_templates")
}

// DayTemplateItem represents a task assignment within a day template
// Contains the same assignment information as TaskAssignment but as a template
model DayTemplateItem {
  id               String      @id @default(cuid())
  memberId         String?     @map("member_id")         // Optional - null means unassigned in template
  taskId           String      @map("task_id")
  overrideTime     String?     @map("override_time")     // Optional time override in HH:MM format (UTC)
  overrideDuration Int?        @map("override_duration") // Optional duration override in minutes
  sortOrder        Int         @default(0)               // Order within the template for consistent application
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  dayTemplateId    String      @map("day_template_id")
  dayTemplate      DayTemplate @relation(fields: [dayTemplateId], references: [id], onDelete: Cascade)
  member           User?       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  task             Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Ensure one template item per member per task per template (allow multiple unassigned)
  @@unique([dayTemplateId, memberId, taskId])
  @@map("day_template_items")
}

// WeekTemplate represents a reusable template for scheduling a full week
// Contains 7 DayTemplates, one for each day of the week (Monday through Sunday)
// Examples: "Standard Work Week", "School Week", "Vacation Week"
model WeekTemplate {
  id          String             @id @default(cuid())
  name        String             // Template name (e.g., "Standard Work Week", "School Week")
  description String?            // Optional description
  isActive    Boolean            @default(true) // Whether this template can be used
  
  // Rule-based application system
  isDefault   Boolean            @default(false) @map("is_default") // Whether this is the default template
  applyRule   WeekTemplateRule?  @map("apply_rule") // Rule for automatic application
  priority    Int                @default(0) // Priority when multiple rules match (higher = higher priority)
  
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  familyId    String             @map("family_id")
  family      Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)
  days        WeekTemplateDay[]  // Day templates for each day of the week
  weekOverrides WeekOverride[]   // Week overrides that use this template

  @@unique([familyId, name]) // Unique template names per family
  @@map("week_templates")
}

// WeekTemplateDay represents a day template assignment within a week template
// Links a specific day of the week to a DayTemplate
model WeekTemplateDay {
  id             String       @id @default(cuid())
  dayOfWeek      Int          // 0 = Sunday, 1 = Monday, ..., 6 = Saturday (ISO 8601 standard)
  dayTemplateId  String       @map("day_template_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  weekTemplateId String       @map("week_template_id")
  weekTemplate   WeekTemplate @relation(fields: [weekTemplateId], references: [id], onDelete: Cascade)
  dayTemplate    DayTemplate  @relation(fields: [dayTemplateId], references: [id], onDelete: Cascade)

  // Ensure one day template per day of week per week template
  @@unique([weekTemplateId, dayOfWeek])
  @@map("week_template_days")
}

enum FamilyMemberRole {
  ADMIN
  MEMBER
}

enum FamilyInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum FamilyJoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// WeekOverride stores week-specific overrides and customizations
// Only created when a week deviates from the standard template
model WeekOverride {
  id             String   @id @default(cuid())
  weekStartDate  DateTime @map("week_start_date") // Monday of the week (YYYY-MM-DD)
  weekTemplateId String?  @map("week_template_id") // Base template (nullable for custom weeks)
  familyId       String   @map("family_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  family         Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  weekTemplate   WeekTemplate? @relation(fields: [weekTemplateId], references: [id], onDelete: SetNull)
  taskOverrides  TaskOverride[]
  
  @@unique([familyId, weekStartDate])
  @@map("week_overrides")
}

// TaskOverride stores specific task assignment overrides for a week
// Only created when tasks differ from the week template
model TaskOverride {
  id               String             @id @default(cuid())
  assignedDate     DateTime           @map("assigned_date") // Specific date
  taskId           String             @map("task_id")
  
  // Override types
  action           TaskOverrideAction // ADD, REMOVE, REASSIGN, MODIFY_TIME
  
  // Override values (only set when relevant)
  originalMemberId String?  @map("original_member_id") // For REASSIGN: who it was assigned to
  newMemberId      String?  @map("new_member_id")      // For ADD/REASSIGN: who it's now assigned to
  overrideTime     String?  @map("override_time")      // For MODIFY_TIME: new time
  overrideDuration Int?     @map("override_duration")  // For MODIFY_TIME: new duration
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  weekOverrideId   String   @map("week_override_id")
  
  weekOverride     WeekOverride @relation(fields: [weekOverrideId], references: [id], onDelete: Cascade)
  task             Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  originalMember   User?        @relation("TaskOverrideOriginalMember", fields: [originalMemberId], references: [id])
  newMember        User?        @relation("TaskOverrideNewMember", fields: [newMemberId], references: [id])
  
  @@unique([weekOverrideId, assignedDate, taskId])
  @@map("task_overrides")
}

enum TaskOverrideAction {
  ADD        // Add a task not in template
  REMOVE     // Remove a task from template
  REASSIGN   // Change who's assigned to a task
  MODIFY_TIME // Change time/duration of a task
}

enum WeekTemplateRule {
  EVEN_WEEKS  // Apply to even-numbered weeks (ISO week numbers)
  ODD_WEEKS   // Apply to odd-numbered weeks (ISO week numbers)
}
