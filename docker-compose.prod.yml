version: '3.8'

services:
  # Database migration service (runs once then exits)
  db-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-board-db-migrate
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - family-board-network
    profiles:
      - migration
    command: ["npx", "prisma", "migrate", "deploy"]
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database migration conflict resolution service
  db-migrate-resolve:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-board-db-migrate-resolve
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - family-board-network
    profiles:
      - migration
    command: ["npx", "prisma", "migrate", "resolve", "--applied", "20250704221451_initial_schema"]
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database push service (safe fallback for migration conflicts)
  db-push:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-board-db-push
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - family-board-network
    profiles:
      - migration
    command: ["npx", "prisma", "db", "push"]
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database connection check
  db-check:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: |
      sh -c "
        echo 'Checking database connection...'
        until npx prisma db pull --force; do
          echo 'Database not ready - waiting...'
          sleep 5
        done
        echo 'Database connection successful!'
      "
    environment:
      - DATABASE_URL=${DATABASE_URL}
    restart: "no"

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: family-board-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
    networks:
      - family-board-network
    restart: unless-stopped
    # Resource limits to prevent memory issues
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Logging configuration to prevent log buildup
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: family-board-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - backend
    networks:
      - family-board-network
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: family-board-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/certbot
    networks:
      - family-board-network
    # This will be run manually for initial setup and renewal
    profiles:
      - ssl-setup
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d mabt.eu -d www.mabt.eu

  # Nginx reverse proxy with SSL support
  nginx:
    image: nginx:alpine
    container_name: family-board-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt:ro
      - web-root:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - family-board-network
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  family-board-network:
    driver: bridge

volumes:
  certbot-etc:
    driver: local
  certbot-var:
    driver: local
  web-root:
    driver: local

# Docker system configuration for automatic cleanup
x-docker-cleanup: &docker-cleanup
  # This is a template for cleanup settings
  # Applied via deployment scripts 